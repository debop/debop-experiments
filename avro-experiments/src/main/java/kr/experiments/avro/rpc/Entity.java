/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kr.experiments.avro.rpc;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Entity extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Entity\",\"namespace\":\"kr.experiments.avro.rpc\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"createdTime\",\"type\":\"long\"},{\"name\":\"body\",\"type\":\"string\"},{\"name\":\"attrs\",\"type\":{\"type\":\"map\",\"values\":\"string\",\"java_class\":\"java.util.HashMap\"}}]}");

    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    @Deprecated public long id;
    @Deprecated public long createdTime;
    @Deprecated public java.lang.CharSequence body;
    @Deprecated public java.util.Map<java.lang.CharSequence, java.lang.CharSequence> attrs;

    /** Default constructor. */
    public Entity() {}

    /** All-args constructor. */
    public Entity(java.lang.Long id, java.lang.Long createdTime, java.lang.CharSequence body, java.util.Map<java.lang.CharSequence, java.lang.CharSequence> attrs) {
        this.id = id;
        this.createdTime = createdTime;
        this.body = body;
        this.attrs = attrs;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return id;
            case 1:
                return createdTime;
            case 2:
                return body;
            case 3:
                return attrs;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                id = (java.lang.Long) value$;
                break;
            case 1:
                createdTime = (java.lang.Long) value$;
                break;
            case 2:
                body = (java.lang.CharSequence) value$;
                break;
            case 3:
                attrs = (java.util.Map<java.lang.CharSequence, java.lang.CharSequence>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /** Gets the value of the 'id' field. */
    public java.lang.Long getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     *
     * @param value the value to set.
     */
    public void setId(java.lang.Long value) {
        this.id = value;
    }

    /** Gets the value of the 'createdTime' field. */
    public java.lang.Long getCreatedTime() {
        return createdTime;
    }

    /**
     * Sets the value of the 'createdTime' field.
     *
     * @param value the value to set.
     */
    public void setCreatedTime(java.lang.Long value) {
        this.createdTime = value;
    }

    /** Gets the value of the 'body' field. */
    public java.lang.CharSequence getBody() {
        return body;
    }

    /**
     * Sets the value of the 'body' field.
     *
     * @param value the value to set.
     */
    public void setBody(java.lang.CharSequence value) {
        this.body = value;
    }

    /** Gets the value of the 'attrs' field. */
    public java.util.Map<java.lang.CharSequence, java.lang.CharSequence> getAttrs() {
        return attrs;
    }

    /**
     * Sets the value of the 'attrs' field.
     *
     * @param value the value to set.
     */
    public void setAttrs(java.util.Map<java.lang.CharSequence, java.lang.CharSequence> value) {
        this.attrs = value;
    }

    /** Creates a new Entity RecordBuilder */
    public static kr.experiments.avro.rpc.Entity.Builder newBuilder() {
        return new kr.experiments.avro.rpc.Entity.Builder();
    }

    /** Creates a new Entity RecordBuilder by copying an existing Builder */
    public static kr.experiments.avro.rpc.Entity.Builder newBuilder(kr.experiments.avro.rpc.Entity.Builder other) {
        return new kr.experiments.avro.rpc.Entity.Builder(other);
    }

    /** Creates a new Entity RecordBuilder by copying an existing Entity instance */
    public static kr.experiments.avro.rpc.Entity.Builder newBuilder(kr.experiments.avro.rpc.Entity other) {
        return new kr.experiments.avro.rpc.Entity.Builder(other);
    }

    /** RecordBuilder for Entity instances. */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Entity>
            implements org.apache.avro.data.RecordBuilder<Entity> {

        private long id;
        private long createdTime;
        private java.lang.CharSequence body;
        private java.util.Map<java.lang.CharSequence, java.lang.CharSequence> attrs;

        /** Creates a new Builder */
        private Builder() {
            super(kr.experiments.avro.rpc.Entity.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(kr.experiments.avro.rpc.Entity.Builder other) {
            super(other);
        }

        /** Creates a Builder by copying an existing Entity instance */
        private Builder(kr.experiments.avro.rpc.Entity other) {
            super(kr.experiments.avro.rpc.Entity.SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.createdTime)) {
                this.createdTime = data().deepCopy(fields()[1].schema(), other.createdTime);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.body)) {
                this.body = data().deepCopy(fields()[2].schema(), other.body);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.attrs)) {
                this.attrs = data().deepCopy(fields()[3].schema(), other.attrs);
                fieldSetFlags()[3] = true;
            }
        }

        /** Gets the value of the 'id' field */
        public java.lang.Long getId() {
            return id;
        }

        /** Sets the value of the 'id' field */
        public kr.experiments.avro.rpc.Entity.Builder setId(long value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'id' field has been set */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'id' field */
        public kr.experiments.avro.rpc.Entity.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'createdTime' field */
        public java.lang.Long getCreatedTime() {
            return createdTime;
        }

        /** Sets the value of the 'createdTime' field */
        public kr.experiments.avro.rpc.Entity.Builder setCreatedTime(long value) {
            validate(fields()[1], value);
            this.createdTime = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'createdTime' field has been set */
        public boolean hasCreatedTime() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'createdTime' field */
        public kr.experiments.avro.rpc.Entity.Builder clearCreatedTime() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'body' field */
        public java.lang.CharSequence getBody() {
            return body;
        }

        /** Sets the value of the 'body' field */
        public kr.experiments.avro.rpc.Entity.Builder setBody(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.body = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'body' field has been set */
        public boolean hasBody() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'body' field */
        public kr.experiments.avro.rpc.Entity.Builder clearBody() {
            body = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'attrs' field */
        public java.util.Map<java.lang.CharSequence, java.lang.CharSequence> getAttrs() {
            return attrs;
        }

        /** Sets the value of the 'attrs' field */
        public kr.experiments.avro.rpc.Entity.Builder setAttrs(java.util.Map<java.lang.CharSequence, java.lang.CharSequence> value) {
            validate(fields()[3], value);
            this.attrs = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'attrs' field has been set */
        public boolean hasAttrs() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'attrs' field */
        public kr.experiments.avro.rpc.Entity.Builder clearAttrs() {
            attrs = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        public Entity build() {
            try {
                Entity record = new Entity();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
                record.createdTime = fieldSetFlags()[1] ? this.createdTime : (java.lang.Long) defaultValue(fields()[1]);
                record.body = fieldSetFlags()[2] ? this.body : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.attrs = fieldSetFlags()[3] ? this.attrs : (java.util.Map<java.lang.CharSequence, java.lang.CharSequence>) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
